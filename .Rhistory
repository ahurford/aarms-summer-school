require(cowplot)
require(magick)
require(patchwork)
g1=ggplot() +
draw_image("images/BBMS.jpg")
g2=ggplot() +
draw_image("images/lecture.jpg")
g1+g2
log(.9)
log(.1)
prod(dnorm(c(2,2),1))
dnorm(c(2,2),1)
dnorm(x=c(2,2),mu = c(1,2),1)
dnorm(x=c(2,2),mean = c(1,2),1)
df1
source("~/Desktop/bar_a.R")
df1
plot(df1)
plot(df1["delta"])
df1
df1["nump"]
plot(seq(0,14),df1["nump"])
length(df1["nump"])
df1["nump"]
df1[,'nump']
plot(df1[,'nump'])
plot(df1[,'nump'], ylim=c(0,1/15))
df1
plot(df1[,'p1'], ylim=c(0,(1/15)+.1))
plot(df1[,'pa'], ylim=c(0,(1/15)+.1))
plot(df1[,'pa'], ylim=c(0,(1/15)+.05))
plot(df1[,'pa'], ylim=c(0,(1/15)+.02))
# Just a bit with more recent exposures
plot(df1[,'la'])
source("~/Desktop/bar_a.R")
source("~/Desktop/bar_a.R")
source("~/Desktop/bar_a.R")
pavec
sum(pavec)
source("~/Desktop/bar_a.R")
# return 7.079011.
a <- seq(0,14, by = 1)
la = dgamma(a, shape = 5.807, scale = 0.948)
sum(a*la)
df1 <- data.frame(a,la)
df1["delta"] <- cumsum(df1$la)
rho = 0.69
psi = 0.75
#equation 19
df1["nump"] <- (1/15)*(1 - rho*(1-psi)*df1$delta)
domp <- (sum(df1[, 'nump'], na.rm = TRUE))
df1["pa"] <- (1/domp)*(df1$num)
# check sum pa
sum(df1[, 'pa'], na.rm = TRUE)
# another check
plot(df1[,'pa'], ylim=c(0,(1/15)+.02))
# Just a bit with more recent exposures
plot(df1[,'la'])
#equation 18
df1["abars1"] <- (df1$la)*(df1$pa)
secsum <- sum(df1[, 'abars1'], na.rm = TRUE)
firsum <- sum(df1[, 'a'], na.rm = TRUE)
firsum*secsum
###################################################
# return 0.3623342 previous equations
a <- seq(0,14, by = 1)
la = dgamma(a, shape = 5.807, scale = 0.948)
sum(a*la)
df1 <- data.frame(a,la)
df1["delta"] <- cumsum(df1$la)
rho = 0.69
psi = 0.75
# equation 19
df1["nump"] <- (1/15)*(1 - rho*(1-psi)*df1$delta)
domp <- (sum(df1[, 'nump'], na.rm = TRUE))
df1["pa"] <- (1/domp)*(df1$num)
# check sum pa
sum(df1[, 'pa'], na.rm = TRUE)
# equation 18
df1["abars"] <- (df1$a)*(df1$la)*(df1$pa)
abar <- sum(df1[, 'abars'], na.rm = TRUE)
abar
#### CORRECTIONS because I made a mistake in the equations:
la.fun = function(a,at){
la = dgamma(a+at, shape = 5.807, scale = 0.948)
}
avec = seq(0,14)
atvec = seq(0,14)
cum.sum = rep(0,15)
cum.sum
source("~/Desktop/bar_a.R")
source("~/Desktop/bar_a.R")
Revenue$Total
Revenue
Revenue = c("AARMS", "MfPH", "CANMOD", "OMNI")
values = c(46750, 25000,25000,25000)
total.rev = sum(values)
Revenue = data.frame(Revenue = c(Revenue, "Total"), cost = c(values, total.rev))
Revenue
Revenue$Total - Total
source("~/Desktop/bar_a_AH.R")
source("~/Desktop/bar_a_AH.R")
x <- seq(0,4,l=20)
y <- sort(rnorm(20))
plot(x,y)
lines(spline(x, y, n = 201), col = 2) # Not necessarily monotonic
lines(cm.spline(x, y, n = 201), col = 3) # Monotonic
install.packages("demography")
install.packages("demography")
library(demography)
x <- seq(0,4,l=20)
y <- sort(rnorm(20))
plot(x,y)
lines(spline(x, y, n = 201), col = 2) # Not necessarily monotonic
lines(cm.spline(x, y, n = 201), col = 3) # Monotonic
install.packages("demography")
install.packages("toastui")
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date()) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
calendar(view = "week", defaultDate = "2023-08-19 15:00:00") %>%
cal_week_options(
workweek = FALSE,
startDayOfWeek = 6,
hourStart = 8,
hourEnd = 18
) %>%
cal_schedules(
title = "Arrive",
start = "2023-08-19 15:00:00",
end = "2023-08-19 20:00:00")%>%
cal_schedules(
title = "C1. Simple Epidemiological Models.",
body = "",
start = "2023-08-20 08:30:00",
end = "2023-08-20 09:30:00")%>%
cal_schedules(
title = "Coffee break",
start = "2023-08-20 09:30:00",
end = "2023-08-20 10:00:00")%>%
cal_schedules(
title = "C1. Host Heterogeneity ",
calendarId=2,
body = "Instructor: Amy Greer
Chapter 3 of Keeling and Rohani",
start = "2023-08-20 10:00:00",
end = "2023-08-20 11:00:00")%>%
cal_schedules(
title = "Problem 1. ",
body = "Jane",
start = "2023-08-20 11:00:00",
end = "2023-08-20 12:00:00")%>%
cal_schedules(
title = "C2. ",
body = "Jane",
start = "2023-08-20 13:00:00",
end = "2023-08-20 14:00:00")%>%
cal_schedules(
title = "Coffee",
start = "2023-08-20 14:00:00",
end = "2023-08-20 14:30:00")%>%
cal_schedules(
title = "C2. ",
body = "Jane",
start = "2023-08-20 14:30:00",
end = "2023-08-20 15:30:00")%>%
cal_schedules(
title = "Problems 2",
body = "Jane",
start = "2023-08-20 15:30:00",
end = "2023-08-20 16:30:00")%>%
cal_schedules(
title = "Projects",
body = "Jane",
start = "2023-08-20 16:30:00",
end = "2023-08-20 17:30:00")
calendar(view = "week", defaultDate = "2023-08-26 15:00:00") %>%
cal_week_options(
workweek = FALSE,
startDayOfWeek = 6,
hourStart = 8,
hourEnd = 18
)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date()) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date()) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
)
%>%
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date()) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date()) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date()) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
library(toastui)
calendar(view = "week", defaultDate = "2023-08-19 15:00:00") %>%
cal_week_options(
workweek = FALSE,
startDayOfWeek = 6,
hourStart = 8,
hourEnd = 18
) %>%
cal_schedules(
title = "Arrive",
start = "2023-08-19 15:00:00",
end = "2023-08-19 20:00:00")%>%
cal_schedules(
title = "C1. Simple Epidemiological Models.",
body = "",
start = "2023-08-20 08:30:00",
end = "2023-08-20 09:30:00")%>%
cal_schedules(
title = "Coffee break",
start = "2023-08-20 09:30:00",
end = "2023-08-20 10:00:00")%>%
cal_schedules(
title = "C1. Host Heterogeneity ",
calendarId=2,
body = "Instructor: Amy Greer
Chapter 3 of Keeling and Rohani",
start = "2023-08-20 10:00:00",
end = "2023-08-20 11:00:00")%>%
cal_schedules(
title = "Problem 1. ",
body = "Jane",
start = "2023-08-20 11:00:00",
end = "2023-08-20 12:00:00")%>%
cal_schedules(
title = "C2. ",
body = "Jane",
start = "2023-08-20 13:00:00",
end = "2023-08-20 14:00:00")%>%
cal_schedules(
title = "Coffee",
start = "2023-08-20 14:00:00",
end = "2023-08-20 14:30:00")%>%
cal_schedules(
title = "C2. ",
body = "Jane",
start = "2023-08-20 14:30:00",
end = "2023-08-20 15:30:00")%>%
cal_schedules(
title = "Problems 2",
body = "Jane",
start = "2023-08-20 15:30:00",
end = "2023-08-20 16:30:00")%>%
cal_schedules(
title = "Projects",
body = "Jane",
start = "2023-08-20 16:30:00",
end = "2023-08-20 17:30:00")%>%
cal_props(cal_demo_props())
calendar(view = "week", defaultDate = "2023-08-26 15:00:00") %>%
cal_week_options(
workweek = FALSE,
startDayOfWeek = 6,
hourStart = 8,
hourEnd = 18
)
calendar(cal_demo_data("week"), view = "week", defaultDate = Sys.Date()) %>%
cal_week_options(
startDayOfWeek = 1,
workweek = TRUE
) %>%
cal_props(cal_demo_props())
cal_demo_props()
cbind(cal_demo_props(),cal_demo_props())
cbind(cal_demo_props(),unname(cal_demo_props()))
rbind(cal_demo_props(),cal_demo_props())
props = rbind(cal_demo_props(),cal_demo_props())
props[4,]
library(toastui)
calendar(view = "week", defaultDate = "2023-08-19 15:00:00") %>% props = rbind(cal_demo_props(),cal_demo_props())
props = rbind(cal_demo_props(),cal_demo_props())
props[,4]
props[4,]
cal_demo_props()
install.packages("rmarkdown")
install.packages("toastui")
install.packages("bookdown")
install.packages("ggplot2")
install.packages("cowplot")
install.packages("patchwork")
#### Process Model
for(t in 2:n){
x[t]~dnorm(x[t-1],tau_add)
}
library(rjags)
#library(rnoaa)
library(daymetr)
devtools::install_github("EcoForecast/ecoforecastR",force=TRUE)
gflu = read.csv("data/gflu_data.txt",skip=11)
time = as.Date(gflu$Date)
#labels(gflu)
y = gflu$Massachusetts
plot(time,y,type='l',ylab="Flu Index",lwd=2,log='y')
RandomWalk = "
model{
#### Data Model
for(t in 1:n){
y[t] ~ dnorm(x[t],tau_obs)
}
#### Process Model
for(t in 2:n){
x[t]~dnorm((1+a_proc)*x[t-1],tau_add)
}
#### Priors
x[1] ~ dnorm(x_ic,tau_ic)
tau_obs ~ dgamma(a_obs,r_obs)
tau_add ~ dgamma(a_add,r_add)
a_proc ~ dnorm(mu_a, sigma_a)
}
"
data <- list(y=log(y),n=length(y),      ## data
x_ic=log(1000),tau_ic=100, ## initial condition prior
a_obs=1,r_obs=1,           ## obs error prior
a_add=1,r_add=1,            ## process error prior
mu_a = 1,sigma_a = 10
)
nchain = 3
init <- list()
for(i in 1:nchain){
y.samp = sample(y,length(y),replace=TRUE)
init[[i]] <- list(tau_add=1/var(diff(log(y.samp))),  ## initial guess on process precision
tau_obs=5/var(log(y.samp)))        ## initial guess on obs precision
}
j.model   <- jags.model (file = textConnection(RandomWalk),
data = data,
inits = init,
n.chains = 3)
## burn-in
jags.out   <- coda.samples (model = j.model,
variable.names = c("tau_add","tau_obs"),
n.iter = 1000)
## burn-in
jags.out   <- coda.samples (model = j.model,
variable.names = c("tau_add","tau_obs","mu_a"),
n.iter = 1000)
plot(jags.out)
RandomWalk = "
model{
#### Data Model
for(t in 1:n){
y[t] ~ dnorm(x[t],tau_obs)
}
#### Process Model
for(t in 2:n){
x[t]~dnorm((1+beta_proc - gamma_proc)*x[t-1],tau_add)
}
#### Priors
x[1] ~ dnorm(x_ic,tau_ic)
tau_obs ~ dgamma(a_obs,r_obs)
tau_add ~ dgamma(a_add,r_add)
beta_proc ~ dgamma(a_beta,r_beta)
gamma_proc ~ dgamma(a_gamma,r_gamma)
}
"
data <- list(y=log(y),n=length(y),      ## data
x_ic=log(1000),tau_ic=100, ## initial condition prior
a_obs=1,r_obs=1,           ## obs error prior
a_add=1,r_add=1,            ## process error prior
a_beta = 1, r_beta=1,
a_gamma = 1/14, r_gamma=1
)
nchain = 3
init <- list()
for(i in 1:nchain){
y.samp = sample(y,length(y),replace=TRUE)
init[[i]] <- list(tau_add=1/var(diff(log(y.samp))),  ## initial guess on process precision
tau_obs=5/var(log(y.samp)))        ## initial guess on obs precision
}
j.model   <- jags.model (file = textConnection(RandomWalk),
data = data,
inits = init,
n.chains = 3)
data <- list(y=log(y),n=length(y),      ## data
x_ic=log(1000),tau_ic=100, ## initial condition prior
a_obs=1,r_obs=1,           ## obs error prior
a_add=1,r_add=1,            ## process error prior
a_beta = 1, r_beta=1,
a_gamma = 0.1, r_gamma=1
)
nchain = 3
init <- list()
for(i in 1:nchain){
y.samp = sample(y,length(y),replace=TRUE)
init[[i]] <- list(tau_add=1/var(diff(log(y.samp))),  ## initial guess on process precision
tau_obs=5/var(log(y.samp)))        ## initial guess on obs precision
}
j.model   <- jags.model (file = textConnection(RandomWalk),
data = data,
inits = init,
n.chains = 3)
RandomWalk = "
model{
#### Data Model
for(t in 1:n){
y[t] ~ dnorm(x[t],tau_obs)
}
#### Process Model
for(t in 2:n){
x[t]~dnorm((1+beta_proc - 0.2)*x[t-1],tau_add)
}
#### Priors
x[1] ~ dnorm(x_ic,tau_ic)
tau_obs ~ dgamma(a_obs,r_obs)
tau_add ~ dgamma(a_add,r_add)
beta_proc ~ dgamma(a_beta,r_beta)
gamma_proc ~ dgamma(a_gamma,r_gamma)
}
"
data <- list(y=log(y),n=length(y),      ## data
x_ic=log(1000),tau_ic=100, ## initial condition prior
a_obs=1,r_obs=1,           ## obs error prior
a_add=1,r_add=1,            ## process error prior
a_beta = 1, r_beta=1,
)
data <- list(y=log(y),n=length(y),      ## data
x_ic=log(1000),tau_ic=100, ## initial condition prior
a_obs=1,r_obs=1,           ## obs error prior
a_add=1,r_add=1,            ## process error prior
a_beta = 1, r_beta=1
)
nchain = 3
init <- list()
for(i in 1:nchain){
y.samp = sample(y,length(y),replace=TRUE)
init[[i]] <- list(tau_add=1/var(diff(log(y.samp))),  ## initial guess on process precision
tau_obs=5/var(log(y.samp)))        ## initial guess on obs precision
}
j.model   <- jags.model (file = textConnection(RandomWalk),
data = data,
inits = init,
n.chains = 3)
RandomWalk = "
model{
#### Data Model
for(t in 1:n){
y[t] ~ dnorm(x[t],tau_obs)
}
#### Process Model
for(t in 2:n){
x[t]~dnorm((1+beta_proc - 0.2)*x[t-1],tau_add)
}
#### Priors
x[1] ~ dnorm(x_ic,tau_ic)
tau_obs ~ dgamma(a_obs,r_obs)
tau_add ~ dgamma(a_add,r_add)
beta_proc ~ dgamma(a_beta,r_beta)
}
"
data <- list(y=log(y),n=length(y),      ## data
x_ic=log(1000),tau_ic=100, ## initial condition prior
a_obs=1,r_obs=1,           ## obs error prior
a_add=1,r_add=1,            ## process error prior
a_beta = 1, r_beta=1
)
nchain = 3
init <- list()
for(i in 1:nchain){
y.samp = sample(y,length(y),replace=TRUE)
init[[i]] <- list(tau_add=1/var(diff(log(y.samp))),  ## initial guess on process precision
tau_obs=5/var(log(y.samp)))        ## initial guess on obs precision
}
j.model   <- jags.model (file = textConnection(RandomWalk),
data = data,
inits = init,
n.chains = 3)
data <- list(y=log(y),n=length(y),      ## data
x_ic=log(1000),tau_ic=100, ## initial condition prior
a_obs=1,r_obs=1,           ## obs error prior
a_add=1,r_add=1,            ## process error prior
a_beta = 1,r_beta=1
)
nchain = 3
init <- list()
for(i in 1:nchain){
y.samp = sample(y,length(y),replace=TRUE)
init[[i]] <- list(tau_add=1/var(diff(log(y.samp))),  ## initial guess on process precision
tau_obs=5/var(log(y.samp)))        ## initial guess on obs precision
}
j.model   <- jags.model (file = textConnection(RandomWalk),
data = data,
inits = init,
n.chains = 3)
365*24*60*60
10^20/31536000
10^20
10^20/1e6
